name: Read from storage
inputs:
- {name: raw_storage_input}
outputs:
- {name: rows, type: Float}
- {name: step_one_output_data, type: String}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def read_from_storage(raw_storage_input):
          #import libraries
          import sys, subprocess;
          subprocess.run([sys.executable, '-m', 'pip', 'install', 'fs-gcsfs'])
          subprocess.run([sys.executable, '-m', 'pip', 'install', 'gcsfs'])
          subprocess.run([sys.executable, '-m', 'pip', 'install', 'pandas'])
          import pandas as pd
          from collections import namedtuple
          import gcsfs

          data = pd.read_csv(raw_storage_input)

          #Get number of row in dataset
          rows_raw_data = len(data)

          #Write Staging data to bucket
          write_to_storage = data.to_csv('gs://crazy-hippo-01/dataset/census_step_one.csv', index = False, header=True)

          step_one_output_data = 'gs://crazy-hippo-01/dataset/census_step_one.csv'

          #Return number of rows
          return(rows_raw_data, step_one_output_data)

      def _serialize_float(float_value: float) -> str:
          if isinstance(float_value, str):
              return float_value
          if not isinstance(float_value, (float, int)):
              raise TypeError('Value "{}" has type "{}" instead of float.'.format(str(float_value), str(type(float_value))))
          return str(float_value)

      def _serialize_str(str_value: str) -> str:
          if not isinstance(str_value, str):
              raise TypeError('Value "{}" has type "{}" instead of str.'.format(str(str_value), str(type(str_value))))
          return str_value

      import argparse
      _parser = argparse.ArgumentParser(prog='Read from storage', description='')
      _parser.add_argument("--raw-storage-input", dest="raw_storage_input", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=2)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = read_from_storage(**_parsed_args)

      _output_serializers = [
          _serialize_float,
          _serialize_str,

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --raw-storage-input
    - {inputValue: raw_storage_input}
    - '----output-paths'
    - {outputPath: rows}
    - {outputPath: step_one_output_data}
